#include "../clientlib/function_inliner.dl"
#include "../clientlib/storage_modeling/storage_modeling.dl"

// **
//  * custom data flow analysis
//  **
.comp FuncParaTaintFlowAnalysis : GlobalFlowAnalysis{
  // set up GlobalFlowAnalysis relation
  TransferStmt(stmt) :- FlowOp(op), Statement_Opcode(stmt, op).
  TransferBoundary(b) :- IsBlock(b).

  // input taint sources
  .decl TaintSource(func: Function, source: Variable)
  InitialFlowVar(x) :- TaintSource(_, x).
  
  // set up tainted Variable and tainted Storage index
  .decl TaintVariable(func: Function, source: Variable, var: Variable)
  .decl TaintSink(name: symbol, source: number, index: StorageIndex)
  
  // set up transfer function based on GlobalFlowAnalysis
  TaintVariable(func, source, toVar) :-
    TaintSource(func, source), 
    Flows(source, toVar).
  TaintVariable(func, source, toVar) :-
    TaintVariable(func, source, fromvar),
    Flows(fromvar, toVar).
  
  // set up taint sink if it is a storage variable
  TaintSink(name, n, index) :- 
    TaintVariable(func, source, var),
    Uses(stmt, var),
    StorageAccessOp(stmt, varIndex),
    Variable_StorageIndex(varIndex, index),
    PublicFunctionArg(func, source, n),
    HighLevelFunctionName(func, name).
}

.init taintflow = FuncParaTaintFlowAnalysis
taintflow.TaintSource(func, source) :- PublicFunctionArg(func, source, _).
.output taintflow.TaintSink